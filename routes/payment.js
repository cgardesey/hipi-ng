const express = require('express');
const checkAuthMiddleware = require('../middleware/check-auth');
const ipValidationMiddleware = require('../middleware/ip-validation');
const models = require("../models");
const Validator = require("fastest-validator");
const config = require("../config/config.json");
const opayHelper = require("../helpers/opay-helper-functions");

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     Payment:
 *       type: object
 *       required:
 *         - token
 *         - name
 *         - payer_id
 *         - msisdn
 *         - amount
 *         - mno
 *         - ref_id
 *       properties:
 *         token:
 *           type: string
 *           description: API token provided by API provider
 *         name:
 *           type: string
 *           description: Payer's name or account reference
 *         payer_id:
 *           type: string
 *           description: User id of the payer
 *         msisdn:
 *           type: string
 *           description: Mobile wallet number to be debited (e.g. 2257XXXXXXXX)
 *         amount:
 *           type: number
 *           format: double
 *           minimum: 0.1
 *           description: Transaction amount (up to 2 decimal places)
 *         mno:
 *           type: string
 *           description: Mobile Network Operator (MTNCI, VODAFONE, AIRTEL, GMONEY)
 *         ref_id:
 *           type: string
 *           description: Third party transaction reference ID
 *         auth_token:
 *           type: string
 *           description: Authentication token generated by user if required by Telco
 *         sender_id_number:
 *           type: string
 *           description: Sender ID number (format GHA-XXXXXXXXX-X)
 *         product_name:
 *           type: string
 *           description: Product or service name
 *         product_description:
 *           type: string
 *           description: Product or service description
 *       example:
 *         token: "<API token>"
 *         name: "John Doe"
 *         payer_id: "12345"
 *         msisdn: "225544881862"
 *         amount: 1
 *         mno: "MTNCI"
 *         ref_id: "TXN12345"
 *         auth_token: ""
 *         sender_id_number: "GHA-123456789-1"
 *         product_name: "Premium Service"
 *         product_description: "Monthly subscription"
 *
 *     OpayPayment:
 *       type: object
 *       required:
 *         - token
 *         - name
 *         - payer_id
 *         - amount
 *         - ref_id
 *       properties:
 *         token:
 *           type: string
 *           description: API token provided by API provider
 *         name:
 *           type: string
 *           description: Payer's name
 *         payer_id:
 *           type: string
 *           description: User id of the payer
 *         amount:
 *           type: number
 *           format: double
 *           minimum: 1
 *           description: Transaction amount in Naira (e.g., 100.50)
 *         ref_id:
 *           type: string
 *           description: Unique transaction reference ID
 *         user_email:
 *           type: string
 *           description: Payer's email address
 *         user_mobile:
 *           type: string
 *           description: Payer's mobile number (Nigerian format)
 *         pay_method:
 *           type: string
 *           description: Payment method (BankCard, BankAccount, USSD, BankTransfer, OWealth, QR)
 *         product_name:
 *           type: string
 *           description: Product or service name
 *         product_description:
 *           type: string
 *           description: Product or service description
 *       example:
 *         token: "<API token>"
 *         name: "Jane Doe"
 *         payer_id: "67890"
 *         amount: 5000.00
 *         ref_id: "TXN987654"
 *         user_email: "jane@example.com"
 *         user_mobile: "+2348012345678"
 *         pay_method: "BankCard"
 *         product_name: "Service A"
 *         product_description: "Payment for subscription A"
 */

/**
 * @swagger
 * /payments:
 *   post:
 *     summary: Create payment
 *     description: Debit mobile money wallet via Nsano Fusion API or create OPay payment
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             oneOf:
 *               - $ref: '#/components/schemas/Payment'
 *               - $ref: '#/components/schemas/OpayPayment'
 *     responses:
 *       200:
 *         description: Payment created successfully
 *         content:
 *           application/json:
 *             examples:
 *               Nsano:
 *                 summary: Nsano sample output
 *                 value:
 *                   msg: "Transaction in progress"
 *                   code: "00"
 *               Opay:
 *                 summary: OPay sample output
 *                 value:
 *                   code: "00000"
 *                   message: "SUCCESSFUL"
 *                   data:
 *                     reference: "TXN12345678"
 *                     orderNo: "211009140896553163"
 *                     cashierUrl: "https://sandboxcashier.opaycheckout.com/..."
 *                     status: "INITIAL"
 *                     amount:
 *                       total: 500000
 *                       currency: "NGN"
 *       400:
 *         description: Validation failed
 *       401:
 *         description: Unauthorized - Invalid token
 *       500:
 *         description: Some server error occurred
 */
router.post("/", ipValidationMiddleware.ipValidation, checkAuthMiddleware.checkAuth, async (req, res) => {
    try {
        // Determine if this is an OPay payment (Nigeria) or Nsano payment (Ivory Coast)
        const isOpayPayment = req.body.user_email ||
            req.body.product_name ||
            req.body.pay_method ||
            (req.body.msisdn && req.body.msisdn.startsWith('234')) ||
            (req.body.user_mobile && req.body.user_mobile.includes('234'));

        if (isOpayPayment) {
            return await handleOpayPayment(req, res);
        } else {
            return await handleNsanoPayment(req, res);
        }
    } catch (error) {
        console.log(error);
        res.status(500).json({ message: "Something went wrong!" });
    }
});

/**
 * Handle OPay payment for Nigeria
 */
async function handleOpayPayment(req, res) {
    const formattedPhone = opayHelper.formatNigerianPhone(req.body.user_mobile || req.body.msisdn);

    const payment = {
        name: req.body.name,
        payer_id: req.body.payer_id,
        amount: parseFloat(req.body.amount),
        currency: config.opay.currency,
        ref_id: req.body.ref_id,
        user_email: req.body.user_email,
        user_mobile: formattedPhone,
        user_name: req.body.name,
        product_name: req.body.product_name || "Payment",
        product_description: req.body.product_description || "Payment for services",
        pay_method: req.body.pay_method
    };

    const schema = {
        name: { type: "string", min: 1 },
        payer_id: { type: "string", min: 1 },
        amount: { type: "number", min: 1 },
        currency: { type: "string", enum: ["NGN"] },
        ref_id: { type: "string", min: 1 },
        user_email: { type: "email", optional: true },
        user_mobile: { type: "string", optional: true },
        user_name: { type: "string", min: 1 },
        product_name: { type: "string", optional: true },
        product_description: { type: "string", optional: true },
        pay_method: { type: "string", optional: true, enum: ["BankCard", "BankAccount", "BankTransfer", "USSD", "OWealth", "QR"] }
    };

    const v = new Validator();
    const validationResponse = v.validate(payment, schema);

    if (validationResponse !== true) {
        return res.status(400).json({ message: "Validation failed", errors: validationResponse });
    }

    const created_payment = await models.Payment.create(payment);
    const opayResponse = await opayHelper.createPayment(payment);

    const updateObj = {
        order_no: opayResponse.data.orderNo,
        cashier_url: opayResponse.data.cashierUrl,
        opay_status: opayResponse.data.status,
        create_time: Date.now()
    };

    const statusMapping = opayHelper.mapOpayStatus(opayResponse.data.status);
    updateObj.code = statusMapping.code;
    updateObj.msg = statusMapping.msg;

    await created_payment.update(updateObj);

    res.status(200).json({
        code: opayResponse.code,
        message: opayResponse.message,
        data: {
            reference: opayResponse.data.reference,
            orderNo: opayResponse.data.orderNo,
            cashierUrl: opayResponse.data.cashierUrl,
            status: opayResponse.data.status,
            amount: opayResponse.data.amount
        }
    });
}

/**
 * Handle Nsano payment for Ivory Coast (Legacy)
 */
async function handleNsanoPayment(req, res) {
    let msisdn = req.body.msisdn;
    if (msisdn.startsWith('0')) {
        msisdn = '225' + msisdn.substring(1);
    } else if (msisdn.startsWith('+225')) {
        msisdn = msisdn.substring(1);
    }

    const payment = {
        name: req.body.name,
        payer_id: req.body.payer_id,
        amount: parseFloat(req.body.amount),
        mno: req.body.mno,
        ref_id: req.body.ref_id,
        msisdn: msisdn,
        auth_token: req.body.auth_token || "",
        sender_id_number: req.body.sender_id_number || ""
    };

    const schema = {
        name: { type: "string", min: 1 },
        payer_id: { type: "string", min: 1 },
        amount: { type: "number", min: 0.1 },
        mno: { type: "string", enum: ["MTNCI", "VODAFONE", "AIRTEL", "GMONEY"] },
        ref_id: { type: "string", min: 1 },
        msisdn: { type: "string", pattern: /^225[0-9]{9}$/ },
        auth_token: { type: "string", optional: true },
        sender_id_number: { type: "string", optional: true }
    };

    const v = new Validator();
    const validationResponse = v.validate(payment, schema);

    if (validationResponse !== true) {
        return res.status(400).json({ message: "Validation failed", errors: validationResponse });
    }

    const created_payment = await models.Payment.create(payment);

    const nsanoPayload = {
        kuwaita: config.nsano.kuwaita,
        amount: payment.amount.toString(),
        mno: payment.mno,
        refID: payment.ref_id,
        msisdn: payment.msisdn
    };

    if (payment.auth_token) nsanoPayload.authToken = payment.auth_token;
    if (payment.sender_id_number) nsanoPayload.senderIDNumber = payment.sender_id_number;
    if (config.nsano.recipient) nsanoPayload.recipient = config.nsano.recipient;

    const axios = require('axios');
    const baseUrl = config.nsano.base_url;
    const debitUrl = `${baseUrl}/api/fusion/tp/${config.nsano.api_key}`;

    const nsanoResponse = await axios.post(
        debitUrl,
        new URLSearchParams(nsanoPayload).toString(),
        { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
    );

    const updateObj = {};
    if ('msg' in nsanoResponse.data) updateObj.msg = nsanoResponse.data.msg;
    if ('code' in nsanoResponse.data) updateObj.code = nsanoResponse.data.code;
    if ('reference' in nsanoResponse.data) updateObj.reference = nsanoResponse.data.reference;

    if ('sendingHouseMap' in nsanoResponse.data) {
        const sendingHouse = nsanoResponse.data.sendingHouseMap;
        if ('balance' in sendingHouse) updateObj.balance_before = sendingHouse.balance.toString();
        if ('mapID' in sendingHouse) updateObj.map_id = sendingHouse.mapID;
        if ('VAVersion' in sendingHouse) updateObj.va_version = sendingHouse.VAVersion.toString();
        if ('mapName' in sendingHouse) updateObj.map_name = sendingHouse.mapName;
    }

    await created_payment.update(updateObj);

    if (nsanoResponse.data.code === "00" || nsanoResponse.data.code === "03") {
        res.status(200).json({ msg: nsanoResponse.data.msg, code: nsanoResponse.data.code });
    } else {
        res.status(400).json({
            message: "Payment request failed",
            error: nsanoResponse.data.msg || "Unknown error occurred",
            code: nsanoResponse.data.code
        });
    }
}

module.exports = router;
